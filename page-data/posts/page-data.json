{
    "componentChunkName": "component---src-templates-category-template-js",
    "path": "/posts",
    "result": {"pageContext":{"currentCategory":"All","edges":[{"node":{"id":"d2025038-9df6-56e6-9d51-f4534282f99c","excerpt":"를 이용하면 슬랙의 특정 채널에 자동으로 글을 올리거나, 올라온 글을 받아 오는 Bot을 만들 수 있다. 먼저,  페이지에서 App을 만들고 권한 설정 작업을 시작해야 한다.\nApp 생성 및 권한 설정이 완료되었다면 Slack에 해당 App을 설치하고, 글을 등록할 채널에 생성할 App을 추가해 준다. 이후 Node.js 또는 여러 Api 서버로 글을 등록 할 수 있다.\n특정 주기마다 자동으로 글을 올리고 싶다면 각 언어, 프레임 워크 별 전용 모듈을 활용하면 된다! 🤖 Slack Bot 생성  먼저, https://api.slack.com 에 접속해 준다. 사이트에 접속 했다면 왼쪽 아래에  버튼을 눌러준다.  밑의 From an app manifest는 신경쓰지 말자 그럼 이렇게 창이 뜨는데 위의 를 클릭하자!  워크스페이스가 없다면 여기로! 봇 이름을 입력해 주고 밑에 어느 워크스페이스에 생성할 지 정해준다.\n그러면 밑의 이 활성화 되는데 눌러주자!  슬랙 봇을 전반적으로 설…","fields":{"slug":"/slack-bot/"},"frontmatter":{"categories":"Slack","title":"쉽고 간단한 Slack Bot 만들기","date":"January 03, 2022"}},"next":{"fields":{"slug":"/express-tdd/"}},"previous":null},{"node":{"id":"70e74532-9db5-55ee-8b80-abf144321322","excerpt":"개발이 어느정도 진행되고, API 서버가 정상 작동하는지 포스트맨으로 일일히 확인해봤다.\n하지만  단계이긴 하지만 규모가 점차 커질수록 기능이 많아져 수작업으로 테스트를 하는게 불안해지기 시작했다. 그래서 를 이용한 단위 테스트로 TDD를 적용해 보고자 포스팅을 하게 되었다. 👠 Jest 란 는 코드가 정상적으로 동작하는 지 확인하는 테스트 케이스를 만들어\n정해놓은 값과 반환되는 값을 비교해 코드의 상태를 확인해주는 프레임워크 이다. ❓ Jest를 사용하는 이유 가 코드 스타일에 규칙을 정하는 것이라면 코드가 올바른 기능을 하는 지 체크 할 수 있다.\n이를 통해 보다 안정적이고 제대로 동작하는 코드를 작성할 수 있다. 🛠 Jest 설정하기 현재 개발 환경이 이므로 ,  관련 모듈도 설치해 준다.\n그리고 는 통신을 만들어 주는 역할을 하니  테스트를 위해 필요하므로 같이 설치해 준다. 그 뒤 script 설정과 jest 설정을 따로 해줘야 한다.  test 환경으로 핸들링 하기 위해…","fields":{"slug":"/express-tdd/"},"frontmatter":{"categories":"Node.js Express","title":"Jest를 이용한 Express 단위 테스트","date":"January 02, 2022"}},"next":{"fields":{"slug":"/express-error-middleware/"}},"previous":{"fields":{"slug":"/slack-bot/"}}},{"node":{"id":"47e00f98-5c31-5401-aee9-8d62f9339cf0","excerpt":"","fields":{"slug":"/express-error-middleware/"},"frontmatter":{"categories":"Node.js Express","title":"Express error middleware & Custom error module","date":"January 02, 2022"}},"next":{"fields":{"slug":"/goodbye-2021/"}},"previous":{"fields":{"slug":"/express-tdd/"}}},{"node":{"id":"be133c02-0cb3-50a8-9545-ca70d7256593","excerpt":"👣 이번년도를 돌아보며  개발을 처음 접해보고 올해  42 라피신,  42 본과정,  현재까지의 모습을 돌아보려 한다. 💻 개발 시작 처음 국비지원 학원을 다니게 되었다. 으로 웹 개발 풀스택 6개월 과정에 접하며 6개월만 지나면 나도 번듯한 곳에 취업하고, 앞날이 창창대로 일 줄 알고 매우 설레었다 😂  국비를 포기하게 된 결정적인 이유인 짤이다 하지만 다닌지 1주일 후 강사님의 자질이 의심이 되어 여러 사이트를 돌아보며 국비의 한계와 개발자의 로드맵 등을 읽어봤고 내가 생각했던 상상은 모두 박살이 나버렸다.\n역시 인생은 쉽게 흘러가지 않고 열심히 살아야 한다는것을 알게 되었다. 일주일만에 학원을 그만 둘 생각을 했지만 한달이라도 다니면 40만원을 나라에서 줬기에 수업은 듣지않고 여러 사이트를 돌아다니며 처음 공부하면 좋을만한 언어를 검색 또 검색을 하여 를 접하게 되었다.\n모든 언어의 근본이라길래 를 시작했지만 막상 처음 배울때는 영어를 처음 배울때 이상으로 어려웠다…🥲\n그래서…","fields":{"slug":"/goodbye-2021/"},"frontmatter":{"categories":"회고","title":"2021년 회고","date":"December 31, 2021"}},"next":{"fields":{"slug":"/42alert-retrospective/"}},"previous":{"fields":{"slug":"/express-error-middleware/"}}},{"node":{"id":"a2145f80-223a-560f-9c9c-1d43887bb871","excerpt":"🤔 만들게 된 이유 42 과정에는 , , , ,  등등 여러 이벤트를 자체 인트라넷에 알려주는 알림 서비스가 있다. 라피신 봉사나 멘토특강 등 특정 이벤트는 선착순이라 빠르면 1분안에 자리가 꽉찬다\n42 월렛마켓에는 AWS $1000 Credit, 학장님과의 식사(학장님이 사주신다ㅋ) 등 재미난 상품들이 많다 현재 존재하는 이벤트 알림이 있지만 지금 본과정에 들어온지 8개월 가량이 지났는데 선별과정(2월)부터 항상 인트라 알림 서비스에 불만이 있었다.\n자체 API를 사용하지 않는이상 알림을 메일 또는 메신저로 받을 방법이 없고, 직접 사이트에 접속해서 확인을 해야 이벤트 등록이 가능하다보니 선착순으로 진행되는 이벤트는 놓치기 부지기수였다. 그렇게 내가 편해지기 위해  다짐을 한 뒤 반년이 넘는 시간이 지나고 어느날 갑자기 새벽감성에 젖어 개발에 시작하게 되었다 ..🤣 👨‍💻 개발 시작  이번 프로젝트의 개발환경 일단 요즘 정말 맘에들어 배우는 중인 를 이용해 제작을 하였다.\n그리고 배…","fields":{"slug":"/42alert-retrospective/"},"frontmatter":{"categories":"프로젝트 회고","title":"42 Alert 프로젝트 회고","date":"December 29, 2021"}},"next":{"fields":{"slug":"/nodejs-typescript/"}},"previous":{"fields":{"slug":"/goodbye-2021/"}}},{"node":{"id":"b3a7251e-accf-528c-9713-a4d8acd5318c","excerpt":"🧢 Typescript 를 사용하며 프로젝트를 진행했을 때 규모가 커질 수록 클래스 기반 객체지향 언어 , ,  등에 익숙한 개발자에게 혼란을 야기할 수 있다.\n이유는 단지 가 동적 타입 언어이기 때문이며 이의 문제를 극복하고자 정적 타입 언어인 를 도입하게 되었다. 애초에 언어가 잘 정제되기 전에 서두른 출시와 웹페이지의 보조적인 기능을 수행하던 의 태생적 한계이기도 하다.  Typescript superset 는 의 이므로 기존의  문법을 그대로 사용할 수 있다. 또한, 의 새로운 기능들을 사용하기 위해 과 같은 별도 를 사용하지 않아도 의 새로운 기능을 기존의 자바스크립트 엔진(현재의 브라우저 또는 Node.js)에서 실행할 수 있다. 이후 의 업그레이드에 따른 새로운 기능을 지속적으로 추가할 예정이여서 매년 업그레이드될 의 표준을 따라갈 수 있는 좋은 수단이 될 것이다. ⚙️ Setting 먼저 를 설치해야한다 아래와 같이 또는 을 통해 설치해 준다. 컴파일은 라는 명령어를 …","fields":{"slug":"/nodejs-typescript/"},"frontmatter":{"categories":"Node.js Express","title":"Node.js Typescript 설정","date":"December 29, 2021"}},"next":{"fields":{"slug":"/express-design-pattern/"}},"previous":{"fields":{"slug":"/42alert-retrospective/"}}},{"node":{"id":"8ca9383e-9678-578b-954c-5db66d1b65f2","excerpt":"어느 프레임워크/언어 간에 이 지켜지지 않은채 개발을 시작하게 되면 후에 유지보수, 가독성, 비효율적인 코드의 문제에 직면하게 된다.\n이 올바르게 지켜진 채 개발을 하게 되면 코드의 중복을 피해주며 안정성이 높아지며 유지보수에 많은 도움이 된다.\n이번에 프로젝트를 진행하며 배우게 된 설계를 포스팅 해보려 한다. 🚀 Express.js 프레임워크 Node.js 상에서 구동되는 서버 프레임워크 MVC 패턴을 사용한다. 많은 Method 및 Middleware를 통해 쉬운 API 작성 🌀 MVC 패턴  Model 모델은 클라이언트에 노출되지 않는다. 연산처리 및 DB 처리가 주 된 목적이다. 에서 요청이 들어오면 해당 연산처리 후 정보를 한다. View 클라이언트에 나타나는 부분이다. HTML/CSS/Javascript 등으로 꾸미고, 움직이고, 표현하는게 가능하다. 뷰는 사용자에게 보여지는 반드시 필요한 부분이다. 가공된 정보를 사용자가 보기 쉽게 나타내야 하는 곳이다. Control…","fields":{"slug":"/express-design-pattern/"},"frontmatter":{"categories":"Node.js Express","title":"Express 디자인 패턴","date":"December 27, 2021"}},"next":null,"previous":{"fields":{"slug":"/nodejs-typescript/"}}}],"categories":["All","Slack","Node.js","Express","회고","프로젝트"]}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}