{
    "componentChunkName": "component---src-templates-category-template-js",
    "path": "/posts/Node.js",
    "result": {"pageContext":{"currentCategory":"Node.js","categories":["All","Node.js","기타","네트워크","회고","NestJS","프로젝트","Express"],"edges":[{"node":{"id":"59114fc8-1a5f-5a0a-9e9b-bd4dedbe41de","excerpt":"","fields":{"slug":"/skill/korean-word-textualize/"},"frontmatter":{"categories":"Node.js","title":"한국어 유니코드 분석으로 문장화 해보기","date":"October 16, 2022"}},"next":{"fields":{"slug":"/skill/slack-monitering/"}},"previous":null},{"node":{"id":"94f7adbc-6e01-5de4-9ab6-ec5ad4add288","excerpt":"","fields":{"slug":"/skill/slack-monitering/"},"frontmatter":{"categories":"Node.js 기타","title":"Slack을 서버 오류 알림으로 사용해 보자","date":"October 09, 2022"}},"next":{"fields":{"slug":"/skill/latency-strategy/"}},"previous":{"fields":{"slug":"/skill/korean-word-textualize/"}}},{"node":{"id":"75c4e40a-e9f0-5a39-af16-92fffe954ad8","excerpt":"🌊 Session 이란? [출처] Wikipedia 쉽게 설명하자면 웹에선 가 사이트에 접속해 어느 위치에 있는지, 어떤 상호작용을 했는지 등 의 정보를 서버에 저장해 한 상태를 유지하는 개념이다.\n세션을 쿠키와 굉장히 헷갈려 하는데, 일단 쿠키는 에서 관리되고, 세션은 에서 관리된다. 세션은 쿠키처럼 가시적인 부분에 있는 것이 아니라 이해하기 힘든데, 서버에 파일, 메모리, DB등 어디에든 저장되어 의 상태 관리를 하는 개념이다.\n추상적인 개념이지만, 사용자가 사이트에 접속해 나가기 전 까지 서비스에 따라 사용자의 데이터를 서버에서 관리하는 것이다. 🤝 Session을 유지시키는 방법 프레임워크 내부 를 사용하는 방법이 제일 편하고, 사용하기 쉽지만, 이번엔 다른 방법으로 세션을 구현해 보려 한다. 💾 세션을 구현하기 위한 다양한 방법  위와 같은 게임 데이터가 있다고 가정을 해보고 세션 설계를 진행해 보자.\n일단 를 사용하는 방법, 를 이용하는 방법이 있다. 서비스 요구사항에 …","fields":{"slug":"/skill/session/"},"frontmatter":{"categories":"Node.js","title":"Session이란? JavaScript로 구현하는 Session","date":"September 30, 2022"}},"next":{"fields":{"slug":"/skill/nestjs-aop/"}},"previous":{"fields":{"slug":"/skill/latency-strategy/"}}},{"node":{"id":"122a4296-ace7-5c97-8a62-55037352a874","excerpt":"🤝 횡단 관심사 란?  비즈니스 로직의 핵심 기능이 아닌, 프로세스 중간에 삽입되는 기능을 말한다.\n위 사진처럼 프로세스마다 공통되는 기능을 라고 부르며, 이러한 관심사들의 분리는 , 즉 관점 지향 프로그래밍에서 모듈성을 증가시키기 위한 패터다임이다. 🗿 AOP의 주요 개념 Aspect : 위에서 설명한 를 모듈화 한 것이다. Target : Aspect를 적용하는 곳이다. Advice : 실질적인 부가기능을 담은 구현체이다. JointPoint : 로 필드에서 값을 꺼내올 때 등 다양한 시점에 적용 가능하다. PointCut : 을 정의한 것으로 Advice가 실행될 지점을 정할 수 있음 👽 NestJS의 Interceptor 란? NestJS는 에서 영감을 받은 Interceptor를 다음과 같은 5가지의 예시를 들며 강조하고 있다. 메서드 실행 전후에 추가 논리 바인딩 함수에서 반환된 결과를 변환 함수에서 throw된 예외를 변환 기본 기능 동작 확장 특정 조건에 따라 함수를…","fields":{"slug":"/skill/nestjs-aop/"},"frontmatter":{"categories":"Node.js NestJS","title":"NestJS Interceptor를 이용한 횡단 관심사 분리","date":"September 25, 2022"}},"next":{"fields":{"slug":"/project/reservation-automation/"}},"previous":{"fields":{"slug":"/skill/session/"}}},{"node":{"id":"e8766f3e-fca1-57fa-a86f-a302076eee1f","excerpt":"Typeorm Virtual Column 설정 (1) 이전 포스팅에서 함수와 함수의 차이점을 알아보게 되었는데\n이번 포스팅에선 가상컬럼을 사용하며 join시 위 함수의 문제와 해결법을 포스팅 해보려 한다. 😵‍💫 Custom Virtual Column을 사용해야 하는 이유 예를들어 위처럼 버스 정류소와 주변 맛집이 정류소 pk를 통해 foreign key로 연결이 되어있다 가정해 보자. 이렇게 정류소와 주변 맛집의 관계가 맺어져 있는 상황에서 현재 거리 기준 2km 이내 정류소 주변 맛집을 조회하는 쿼리를 실행하면 어떻게 될까? getRawMany()의 문제 지금 보니 함수를 사용하니 가상 컬럼 효과를 낸 것 같은데 해결된거 아니냐? 할 수 있다.\n그런데 문제는 지금부터이다. 여기서  또는 을 할 경우  위처럼 를 추가해 조회 할 경우\n원래 대로면 부모 객체 안에 join된 객체들이 배열을 이뤄 지정한 key의 배열로 저장이 되어야 한다.\n하지만 를 사용하면 부모객체와의 의존성이 모두…","fields":{"slug":"/skill/typeorm-virtual-column-2/"},"frontmatter":{"categories":"Node.js Express","title":"Typeorm Virtual Column 설정 (2)","date":"January 17, 2022"}},"next":{"fields":{"slug":"/skill/typeorm-virtual-column-1/"}},"previous":{"fields":{"slug":"/project/reservation-automation/"}}},{"node":{"id":"97e689c0-985c-5184-91ff-731bbd79b545","excerpt":"Typeorm Virtual Column 설정 (2) Typeorm을 사용하며 대부분 마음에 들었는데 한가지 딱 아쉬운 부분이 있다…\nMysql에서는 테이블에 특정 컬럼이 없어도 SELECT시에 새로 만들어 출력 할 수 있다.\n현재 Typeorm에 가상 컬럼 기능이 있긴 한데 원하는 목적과 좀 달라서 원하는 데이터를 가공 후 새로운 컬럼을 추가 해 return 받을 수 있게 가상 컬럼에 관해 포스팅 하려 한다. Typeorm 버전 0.2.37에 가상컬럼 업데이트 될거라는 얘기가 있었지만 현재 0.2.41 버전까지 지원이 안되고 있다… 🎓 가상 컬럼이란? Mysql 5.7 부터 지원되는 가상 컬럼은 가상의 컬럼을 둬서 수식과 조건문을 사용해 데이터의 가공 결과를 저장하는 것을 말한다. 사용 방법은 PERSISTENT(stored)와 VIRTUAL(generated-only)이라는 두 가지 타입이 존재하고 디폴트는 PERSISTENT 이다\nPERSISTENT virtual column…","fields":{"slug":"/skill/typeorm-virtual-column-1/"},"frontmatter":{"categories":"Node.js Express","title":"Typeorm Virtual Column 설정 (1)","date":"January 15, 2022"}},"next":{"fields":{"slug":"/skill/express-afterware/"}},"previous":{"fields":{"slug":"/skill/typeorm-virtual-column-2/"}}},{"node":{"id":"97c005d2-a6b0-5121-abb5-d94902e3094f","excerpt":"오늘은 생소하고 아무도 사용 안하는  개념을 도입해 모든 API 응답에 JWT가 만료되었다면 새로 발행해주는 코드 짜고자 한다.\n원래 Express에  개념이 있고 실제로 지원이 된다.\n하지만 현재 구현하는 로직 상 를 사용하면 유지보수에 상당히 도움이 될 것 같다 🤔 Afterware 란? 사실 Express 프레임워크에 란 기능은 없다\n그냥 맨 마지막에 실행되는 함수라 이렇게 부르는 것일 뿐이다\n가 요청 - 응답 사이에 엑세스 권한을 갖는 함수라면\n는 어플리케이션의 모든 프로세스가 끝난 뒤 응답 직전에 실행되는 함수이다  Afterware 이해를 돕기 위한 그림 왼쪽은 일반적인 Express Process이다. 이 경우에 Express 디자인 패턴이 적용 돼\n ->  ->  순으로 실행이 되며 Service가 실행된 뒤 바로 Client에 요청한 데이터를 응답 해준다.\n그리고 오른쪽 프로세스 처럼 를 적용했을 때 Service가 끝이나면 함수를 거쳐 응답이 된다. 🎓 사용하는 …","fields":{"slug":"/skill/express-afterware/"},"frontmatter":{"categories":"Node.js Express","title":"Express Afterware 도입","date":"January 07, 2022"}},"next":{"fields":{"slug":"/skill/express-error-middleware/"}},"previous":{"fields":{"slug":"/skill/typeorm-virtual-column-1/"}}},{"node":{"id":"d75d0358-e120-5eda-9136-e5ca394234e5","excerpt":"⛔️ Custom Error 개발을 하다 보면 자체 여러 클래스가 필요한 경우가 종종 생긴다.\n네트워크 관련 작업 중 에러가 발생했다면 ,\n데이터베이스 관련 작업 중 에러가 발생했다면 ,\n검색 관련 작업 중 에러가 발생했다면 \n등등 직접 연관된 에러를 발생시키는게 직관적이기 때문이다. 나는 API 서버를 제작 중이여서  위주로 작성 했다.\n직접 에러 클래스를 만든 경우, 이 에러들은 , , 처럼 여러 프로퍼티를 지원하게 할 수 있다. 물론 이외의 프로퍼티도 지원 하게 만들 수 있다. 에서 의 인수에 아무런 제약이 없기 때문에 커스텀 에러 클래스는 반드시 를 상속할 필요가 없다.\n하지만 를 상속받아 커스텀 에러 클래스를 만들게 되면 를 사용해 여러 객체를 식별 할 수 있다는 장점이 있다. 그래서 Error를 상속해서 커스텀 Error 클래스를 만들자 🛠 Custom Error 제작  Api 서버에서 사용하는 Api Custom Error이다 인자로 , 를 받아오고 옵션으로 , 을 받아…","fields":{"slug":"/skill/express-error-middleware/"},"frontmatter":{"categories":"Node.js Express","title":"Express error middleware & Custom error module","date":"January 06, 2022"}},"next":{"fields":{"slug":"/skill/slack-bot/"}},"previous":{"fields":{"slug":"/skill/express-afterware/"}}},{"node":{"id":"145981e0-eb31-51f1-8fc5-91a2cb846d73","excerpt":"개발이 어느정도 진행되고, API 서버가 정상 작동하는지 포스트맨으로 일일히 확인해봤다.\n하지만  단계이긴 하지만 규모가 점차 커질수록 기능이 많아져 수작업으로 테스트를 하는게 불안해지기 시작했다. 그래서 를 이용한 단위 테스트로 TDD를 적용해 보고자 포스팅을 하게 되었다. 👠 Jest 란 는 코드가 정상적으로 동작하는 지 확인하는 테스트 케이스를 만들어\n정해놓은 값과 반환되는 값을 비교해 코드의 상태를 확인해주는 프레임워크 이다. ❓ Jest를 사용하는 이유 가 코드 스타일에 규칙을 정하는 것이라면 코드가 올바른 기능을 하는 지 체크 할 수 있다.\n이를 통해 보다 안정적이고 제대로 동작하는 코드를 작성할 수 있다. 🛠 Jest 설정하기 현재 개발 환경이 이므로 ,  관련 모듈도 설치해 준다.\n그리고 는 통신을 만들어 주는 역할을 하니  테스트를 위해 필요하므로 같이 설치해 준다. 그 뒤 script 설정과 jest 설정을 따로 해줘야 한다.  test 환경으로 핸들링 하기 위해…","fields":{"slug":"/skill/express-tdd/"},"frontmatter":{"categories":"Node.js Express","title":"Jest를 이용한 Express 단위 테스트","date":"January 02, 2022"}},"next":{"fields":{"slug":"/retrospective/goodbye-2021/"}},"previous":{"fields":{"slug":"/skill/slack-bot/"}}},{"node":{"id":"767da821-d753-5c29-9fae-ff5e52ce3e5c","excerpt":"🧢 Typescript 를 사용하며 프로젝트를 진행했을 때 규모가 커질 수록 클래스 기반 객체지향 언어 , ,  등에 익숙한 개발자에게 혼란을 야기할 수 있다.\n이유는 단지 가 동적 타입 언어이기 때문이며 이의 문제를 극복하고자 정적 타입 언어인 를 도입하게 되었다. 애초에 언어가 잘 정제되기 전에 서두른 출시와 웹페이지의 보조적인 기능을 수행하던 의 태생적 한계이기도 하다.  Typescript superset 는 의 이므로 기존의  문법을 그대로 사용할 수 있다. 또한, 의 새로운 기능들을 사용하기 위해 과 같은 별도 를 사용하지 않아도 의 새로운 기능을 기존의 자바스크립트 엔진(현재의 브라우저 또는 Node.js)에서 실행할 수 있다. 이후 의 업그레이드에 따른 새로운 기능을 지속적으로 추가할 예정이여서 매년 업그레이드될 의 표준을 따라갈 수 있는 좋은 수단이 될 것이다. ⚙️ Setting 먼저 를 설치해야한다 아래와 같이 또는 을 통해 설치해 준다. 컴파일은 라는 명령어를 …","fields":{"slug":"/skill/nodejs-typescript/"},"frontmatter":{"categories":"Node.js Express","title":"Node.js TypeScript 설정","date":"December 29, 2021"}},"next":{"fields":{"slug":"/skill/express-design-pattern/"}},"previous":{"fields":{"slug":"/project/42alert-retrospective/"}}},{"node":{"id":"ebdfa5b1-b65b-52e1-9abe-3296cc756dc3","excerpt":"어느 프레임워크/언어 간에 이 지켜지지 않은채 개발을 시작하게 되면 후에 유지보수, 가독성, 비효율적인 코드의 문제에 직면하게 된다.\n이 올바르게 지켜진 채 개발을 하게 되면 코드의 중복을 피해주며 안정성이 높아지며 유지보수에 많은 도움이 된다.\n이번에 프로젝트를 진행하며 배우게 된 설계를 포스팅 해보려 한다. 🚀 Express.js 프레임워크 Node.js 상에서 구동되는 서버 프레임워크 MVC 패턴을 사용한다. 많은 Method 및 Middleware를 통해 쉬운 API 작성 🌀 MVC 패턴  Model 모델은 클라이언트에 노출되지 않는다. 연산처리 및 DB 처리가 주 된 목적이다. 에서 요청이 들어오면 해당 연산처리 후 정보를 한다. View 클라이언트에 나타나는 부분이다. HTML/CSS/Javascript 등으로 꾸미고, 움직이고, 표현하는게 가능하다. 뷰는 사용자에게 보여지는 반드시 필요한 부분이다. 가공된 정보를 사용자가 보기 쉽게 나타내야 하는 곳이다. Control…","fields":{"slug":"/skill/express-design-pattern/"},"frontmatter":{"categories":"Node.js Express","title":"Express 디자인 패턴","date":"December 27, 2021"}},"next":null,"previous":{"fields":{"slug":"/skill/nodejs-typescript/"}}}]}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}