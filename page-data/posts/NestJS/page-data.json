{
    "componentChunkName": "component---src-templates-category-template-js",
    "path": "/posts/NestJS",
    "result": {"pageContext":{"currentCategory":"NestJS","categories":["All","Node.js","기타","Express","NestJS","프로젝트","회고"],"edges":[{"node":{"id":"f341528a-1f5b-52f8-9ab1-c0b4084437af","excerpt":"","fields":{"slug":"/skill/socket-session-store/"},"frontmatter":{"categories":"Node.js NestJS","title":"NestJS Socket session store","date":"Invalid date"}},"next":{"fields":{"slug":"/skill/nestjs-aop/"}},"previous":{"fields":{"slug":"/skill/latency-strategy/"}}},{"node":{"id":"122a4296-ace7-5c97-8a62-55037352a874","excerpt":"🤝 횡단 관심사 란?  비즈니스 로직의 핵심 기능이 아닌, 프로세스 중간에 삽입되는 기능을 말한다.\n위 사진처럼 프로세스마다 공통되는 기능을 라고 부르며, 이러한 관심사들의 분리는 , 즉 관점 지향 프로그래밍에서 모듈성을 증가시키기 위한 패터다임이다. 🗿 AOP의 주요 개념 Aspect : 위에서 설명한 를 모듈화 한 것이다. Target : Aspect를 적용하는 곳이다. Advice : 실질적인 부가기능을 담은 구현체이다. JointPoint : 로 필드에서 값을 꺼내올 때 등 다양한 시점에 적용 가능하다. PointCut : 을 정의한 것으로 Advice가 실행될 지점을 정할 수 있음 👽 NestJS의 Interceptor 란? NestJS는 에서 영감을 받은 Interceptor를 다음과 같은 5가지의 예시를 들며 강조하고 있다. 메서드 실행 전후에 추가 논리 바인딩 함수에서 반환된 결과를 변환 함수에서 throw된 예외를 변환 기본 기능 동작 확장 특정 조건에 따라 함수를…","fields":{"slug":"/skill/nestjs-aop/"},"frontmatter":{"categories":"Node.js NestJS","title":"NestJS Interceptor를 이용한 횡단 관심사 분리","date":"September 25, 2022"}},"next":{"fields":{"slug":"/project/reservation-automation/"}},"previous":{"fields":{"slug":"/skill/socket-session-store/"}}}]}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}